[tool.poetry]
name = "nendo-plugin-musicgen"
version = "0.1.4"
authors = [
  "Aaron Abebe <aaron@okio.ai>",
]
description = "Nendo MusicGen plugin: A state-of-the-art controllable text-to-music model (by Meta Research)"
license = "MIT"
readme = "README.md"
repository = "https://github.com/okio-ai/nendo_plugin_musicgen"
homepage = "https://okio.ai"
keywords = [
  "Nendo",
  "Plugin",
  "AI",
  "Machine Learning",
  "Audio",
  "Generative",
  "Music",
  "Audio Production",
  "Audio Generation",
]
classifiers = [
  "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Multimedia :: Sound/Audio",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]

[tool.poetry.dependencies]
python = "^3.8,<3.11"
pydantic = { version = "^2.0.0, <2.5.0" }
pydantic-settings = "^2.1.0"
nendo = "^0.2.5"

[tool.poetry.group.lint.dependencies]
black = "^23.1.0"
ruff = "^0.0.263"

[tool.ruff]
target-version = "py38"
# Same as Black.
line-length = 88
select = [
    "A",
    # "ANN", # flake8-annotations
    "ARG",
    "B",
    "BLE",
    "C",
    "C4",
    "COM",
    "D",
    "DTZ",
    "E",
    "ERA",
    "EXE",
    "F",
    # "FBT", # flake8-boolean-trap
    "G",
    "I",
    "ICN",
    "INP",
    "ISC",
    "N",
    "PGH",
    "PIE",
    "PL",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    # "PT", # flake8-pytest-style
    "PYI",
    "Q",
    "RUF",
    "RSE",
    "RET",
    "S",
    "SIM",
    "SLF",
    "T",
    "T10",
    "T20",
    "TCH",
    "TID",
    # "TRY", # tryceratops
    # "UP", # pyupgrade
    "W",
    "YTT",
]
ignore = [
    "A001",  # Variable is shadowing a Python builtin
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
    "ANN204",  # Missing return type annotation for special method __str__
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "ARG005",  # Unused lambda argument
    "C901",  # Too complex
    "D105",  # Missing docstring in magic method
    "D417",  # Missing argument description in the docstring
    "E501",  # Line too long
    "ERA001",  # Commented out code
    "G004",  # Logging statement uses f-string
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments to function call
    "PLR0915",  # Too many statements
    "SLF001", # Private member accessed
    "TRY003",  # Avoid specifying long messages outside the exception class
]
fixable = [
    "F401", # Remove unused imports.
    "NPY001", # Fix numpy types, which are removed in 1.24.
]
unfixable = ["B"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".pytest_cache",
    ".vscode",
    "__pypackages__",
    "_build",
    "alembic",
    "buck-out",
    "node_modules",
    "venv",
    "site",
    "docs",
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
lines-after-imports = 2
known-first-party = ["nendo"]

[tool.ruff.pydocstyle]
convention = "google"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
